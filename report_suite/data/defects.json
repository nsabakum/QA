{
  "defectsList" : [ {
    "title" : "Product defects",
    "status" : "FAILED",
    "defects" : [ {
      "uid" : "fac4ffa48ce330b",
      "failure" : {
        "message" : "NoSuchElementException: Message: Unable to locate element: //div[@class='converter-result']\n",
        "stackTrace" : "param_test = ['RUR', 'RUR']\n\n    @pytest.allure.feature('CRUD-тест: поле ввода суммы')\n    @pytest.allure.story('Ввод различных параметров и проверка результата')\n    def test_converter(param_test):\n        input, expected_output = param_test\n>       result = converter_func(input)\n\ntest0_converter.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsteps_lib.py:66: in converter_func\n    assert driver.find_element_by_xpath(\"//div[@class='converter-result']\"), 'Блок с результатом не найден'\nc:\\users\\nsaba\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:293: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\nc:\\users\\nsaba\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:752: in find_element\n    'value': value})['value']\nc:\\users\\nsaba\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:236: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x04744C70>\nresponse = {'status': 404, 'value': '{\"error\":\"no such element\",\"message\":\"Unable to locate element: //div[@class=\\'converter-result\\']\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            try:\n                                message = message['message']\n                            except TypeError:\n                                message = None\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[@class='converter-result']\n\nc:\\users\\nsaba\\appdata\\local\\programs\\python\\python35-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:192: NoSuchElementException"
      },
      "testCases" : [ {
        "uid" : "16672a746027af37",
        "name" : "test_converter[param_test0]",
        "title" : "Test converter [param_test0]",
        "time" : {
          "start" : 1484222682189,
          "stop" : 1484222706409,
          "duration" : 24220
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      }, {
        "uid" : "470456ae1ee0c1c0",
        "name" : "test_converter[param_test1]",
        "title" : "Test converter [param_test1]",
        "time" : {
          "start" : 1484222706410,
          "stop" : 1484222722129,
          "duration" : 15719
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      }, {
        "uid" : "6f4908e1ab573242",
        "name" : "test_converter[param_test2]",
        "title" : "Test converter [param_test2]",
        "time" : {
          "start" : 1484222722130,
          "stop" : 1484222737914,
          "duration" : 15784
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      }, {
        "uid" : "30cbf5ef3f85dad8",
        "name" : "test_converter[param_test3]",
        "title" : "Test converter [param_test3]",
        "time" : {
          "start" : 1484222737914,
          "stop" : 1484222753414,
          "duration" : 15500
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      }, {
        "uid" : "25add6a2cbd5ffee",
        "name" : "test_converter[param_test4]",
        "title" : "Test converter [param_test4]",
        "time" : {
          "start" : 1484222753414,
          "stop" : 1484222768982,
          "duration" : 15568
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      }, {
        "uid" : "288591bec7ecfd11",
        "name" : "test_converter[param_test5]",
        "title" : "Test converter [param_test5]",
        "time" : {
          "start" : 1484222768982,
          "stop" : 1484222784672,
          "duration" : 15690
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    } ]
  }, {
    "title" : "Test defects",
    "status" : "BROKEN",
    "defects" : [ {
      "uid" : "b872d5d9baac1bb2",
      "failure" : {
        "message" : "FixtureLookupError: ('data', <FixtureRequest for <Function 'test0_converter'>>)",
        "stackTrace" : "file C:\\Python\\python+selenium\\QA\\sberbank\\test\\NEW\\test_suite.py, line 11\n      def test0_converter(self, data):\n        fixture 'data' not found\n        available fixtures: tmpdir, capsys, tmpdir_factory, record_xml_property, cache, monkeypatch, pytestconfig, param_test, recwarn, capfd\n        use 'py.test --fixtures [testpath]' for help on them.\n\nC:\\Python\\python+selenium\\QA\\sberbank\\test\\NEW\\test_suite.py:11"
      },
      "testCases" : [ {
        "uid" : "9cc163350ffb42bb",
        "name" : "TestSuite.test0_converter",
        "title" : "Test 0 converter",
        "time" : {
          "start" : 1484222791577,
          "stop" : 1484222791580,
          "duration" : 3
        },
        "severity" : "NORMAL",
        "status" : "BROKEN"
      } ]
    } ]
  } ]
}